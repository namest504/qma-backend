buildscript {
	ext {
		restdocsApiSpecVersion = '0.17.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.l1mit'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Database
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	runtimeOnly 'com.h2database:h2'

	// QueryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Test
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'

	// Spring Rest Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// Cache
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

	delete file('src/main/resources/static/docs/')
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"
	}
}


/*bootJar {
	dependsOn('openapi3')
	delete file('src/main/resources/static/docs/')
	doLast {
		copy {
			from "build/resources/main/static/docs"
			into "src/main/resources/static/docs/"
		}
	}
}*/

build {
	dependsOn('openapi3')
	delete file('src/main/resources/static/docs/')
	doLast {
		copy {
			from "build/resources/main/static/docs"
			into "src/main/resources/static/docs/"
		}
	}
}

openapi3 {
	server = "http://localhost:8080"
	title = "QMA API 문서"
	description = "Spring REST Docs with SwaggerUI."
	version = "0.0.1"
	outputFileNamePrefix = 'open-api-3.0.1'
	format = 'yaml'

	outputDirectory = 'build/resources/main/static/docs'
}


// QueryDsl
def generated = "build/generated/querydsl"

sourceSets {
	main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

clean {
	delete file(generated)
}